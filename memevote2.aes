/* 
AEternity Smart Contract for Meme Voting.  Function Usage and such above each.
Dacade.org Course
Antonio Savage
*/

// need to start with creating the contract
contract MemeVote =

  record meme = 
    { creatorAddress : address,
      url            : string,
      name           : string,
      voteCount      : int }

  record state = {
     memes       : map( int, meme ),
     memesLength : int }

// initiates the meme variable into a function
  function init() = 
    { memes = {},
      memesLength = 0 }

/* can call getMeme function to get the value inside of meme
NOTE - old version of the getMeme function that did not have error checking in it to see if the index exists
  public function getMeme(index : int) : meme =
    state.memes[index]
*/

// can call getMeme function to get the value inside of meme
// usage: getMeme, args:index number, Return Type: (address,string,string,int)
  public function getMeme(index : int) : meme =
    switch(Map.lookup( index, state.memes ))
      None    => abort("There was no meme with this index register, try again!")
      Some(x) => x

// user is able to enter a URL string into the registerMeme function
// usage: registerMeme, "url", "yourname", Return Type: int
  public stateful function registerMeme(url' : string, name' : string) =
    let meme = { creatorAddress = Call.caller, url = url', name = name', voteCount = 0}
    let index = getMemesLength() +1
    put( state { memes[index] = meme, memesLength = index })

// usage: getMemesLength, args:none, Return Type: int
  public function getMemesLength() : int = 
    state.memesLength 

// usage: voteMeme, args: meme index number, Return Type: int
  public stateful function voteMeme( index : int) =
    let meme = getMeme(index)
    Chain.spend(meme.creatorAddress, Call.value)
    let updatedVoteCount = meme.voteCount + Call.value
    let updatedMemes = state.memes{ [index].voteCount = updatedVoteCount }
    put(state{ memes = updatedMemes })