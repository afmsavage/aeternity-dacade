/* 
AEternity Smart Contract to create a decentralized pokedex!  Function Usage and such above each.
Dacade.org Course
Antonio Savage
*/

// need to start with creating the contract
contract Pokedex =

  record poke = 
    { creatorAddress : address,
      name           : string,
      url            : string,
      category       : string,
      voteCount      : int }

  record state = {
     pokes       : map( int, poke ),
     pokesLength : int }

// initiates the poke variable into a function
  function init() = 
    { pokes = {},
      pokesLength = 0 }

// can call getPoke function to get the value inside of poke
// usage: getPoke, args:index number, Return Type: (address,string,string,int)
  public function getPoke(index : int) : poke =
    switch(Map.lookup( index, state.pokes ))
      None    => abort("This Pokemon has not been added yet, please add it to the Pokedex!")
      Some(x) => x

// user is able to enter a URL string into the registerPoke function
// usage: registerPoke, "url", "pokemonName", "category" Return Type: int
  public stateful function registerPoke(name' : string, url' : string, category' : string) =
    let poke = { creatorAddress = Call.caller, name = name', url = url', category = category', voteCount = 0}
    let index = getPokesLength() +1
    put( state { pokes[index] = poke, pokesLength = index })

// usage: getPokesLength, args:none, Return Type: int
  public function getPokesLength() : int = 
    state.pokesLength 

// usage: votepoke, args: poke index number, Return Type: int
  public stateful function votepoke( index : int) =
    let poke = getPoke(index)
    Chain.spend(poke.creatorAddress, Call.value)
    let updatedVoteCount = poke.voteCount + Call.value
    let updatedPokes = state.pokes{ [index].voteCount = updatedVoteCount }
    put(state{ pokes = updatedPokes })